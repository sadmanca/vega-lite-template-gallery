---
import type Tag from "../../../types/Tag";
const config = await themeConfig;

const availableTags = config.directory.tags;
---

<div class="flex m-0 mt-4 py-2">
  <div id="tag-list" class="flex gap-2"></div>
  <!-- {
    currentTags.((myTag: Tag) => (
      <div class="relative group border-2 shadow-sm font-semibold text-blue-500 bg-blue-600/10 rounded-lg px-1.5 py-1 inline-flex items-center justify-center">
        <span
          id="tag-remove"
          class="absolute text-gray-500 opacity-0 transition-all group-hover:opacity-100 hover:bg-gray-100 flex items-center justify-center -top-4 left-0 bg-white rounded-full h-6 w-6 border dark:bg-gray-700 dark:border-gray-600 dark:hover:bg-gray-800"
        >
          <Icon name="tabler:x" />
        </span>
        {myTag}
      </div>
    ))
  } -->
  <select
    id="tag-select"
    class="border border-dashed h-10 border-gray-300 rounded-lg font-medium text-gray-500 dark:border-gray-500 dark:bg-gray-700 dark:text-gray-400 focus:ring-primary-500 focus:ring-2 focus:border-none ring-offset-4"
    style="padding-left: 10px !important;"
  >
    <option value="" disabled selected> Select a tag </option>
    {
      availableTags.map((tag: Tag) => (
        <option value={tag.key}>{tag.name}</option>
      ))
    }
  </select>
</div>

<script>
  import { tags } from "../../../store.js";

  tags.subscribe(() => {
    const tagList = document.getElementById("tag-list");

    tagList!.innerHTML = "";

    // Loop through the tags and append each one to the tagList
    for (const tag of tags.get() as string[]) {
      // Create a wrapper div element
      const tagElement = document.createElement("div");

      const tagSpan = document.createElement("span");
      tagSpan.setAttribute("data-value", tag || "");

      // Set its classes and inner HTML content
      tagElement.classList.add(
        "relative",
        "group",
        "border-2",
        "shadow-sm",
        "font-semibold",
        "text-blue-500",
        "bg-blue-600/10",
        "rounded-lg",
        "px-1.5",
        "py-1",
        "inline-flex",
        "items-center",
        "justify-center"
      );

      tagSpan.classList.add(
        "absolute",
        "text-gray-500",
        "opacity-0",
        "transition-all",
        "group-hover:opacity-100",
        "hover:bg-gray-100",
        "flex",
        "items-center",
        "justify-center",
        "-top-4",
        "left-0",
        "bg-white",
        "rounded-full",
        "h-6",
        "w-6",
        "border",
        "dark:bg-gray-700",
        "dark:border-gray-600",
        "dark:hover:bg-gray-800"
      );

      tagSpan.innerHTML = "x";
      tagElement.appendChild(tagSpan);

      tagSpan.addEventListener("click", (event) => {
        const tag_list = tags.get();
        const clickedElement = event.target as HTMLSpanElement;

        const dataValue = clickedElement?.getAttribute("data-value");

        const index = tag_list.indexOf(dataValue as never);
        if (!index) {
          return;
        }
        tag_list.splice(index);
        tags.set([...tag_list]);
      });
      const text = document.createElement("span");
      text.innerHTML = tag;
      tagElement.appendChild(text);

      // Append the newly created tag element to the parent container
      tagList?.appendChild(tagElement);
    }
  });

  document
    ?.getElementById("tag-select")
    ?.addEventListener("change", (event: Event) => {
      const target = event.target as HTMLSelectElement;
      if (!(tags.get() as string[]).includes(target?.value || "")) {
        tags.set([...(tags.get() as never[]), target?.value as never]);
      }
    });
</script>
